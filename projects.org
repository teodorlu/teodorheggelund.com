---
title: Åpne prosjekter
---

Dette er en oversikt over ressurser jeg har laget som ligger åpent tilgjengelig
på nett.

Mye er relatert til [[https://kidsakoder.no/kodeklubb/oslo/][Kodeklubben Oslo]]. Kodeklubben Oslo er et gratis tilbud for
barn og unge som vil lære programmering. Jeg har planlagt, gjennomført og
veiledet kurs, samt skrevet oppgaver.
** Beregningsmekanikk
Masteroppgaven min handlet om hvordan materialer oppfører seg på liten skala,
titulert "Finite element implementation of lower-order strain gradient
plasticity in Abaqus".

Når vi regner på hvordan konstruksjoner oppfører seg ved påføring av krefter,
kan vi velge oss enkle modeller eller kompliserte modeller. Kriterier som
påvirker valget er effekten av brudd, og hvor komplisert konstruksjonen i seg
selv er. Enkle modeller er lette å forstå, kompliserte modeller har potensial
til å predikere oppførsel mer nøyaktig.

1. Newtons lover sier at en belastning må mobilisere en like stor
   reaksjonskraft.
2. Elastisk teori gir at dersom vi dobler kraften, vil vi doble deformasjonen.
   Hvor stor deformasjonen er avhenger av stivheten i materialet.
3. Plastisk teori tar hensyn til at det kan finnes en grense for hvor mye
   krefter en konstruksjon kan tåle. Dobler du kraften du bruker til å dytte på
   et tre, kan det hende at forskyvningen /mer enn/ dobler seg.
4. Gradientplastisk teori ser i tillegg på skalaeffekter. Dersom du påfører en
   svært høy last på et svært lite punkt, sier gradientplastisk teori at
   materialet skal oppføre seg stivere enn predikert av plastisk teori.

I masteroppgaven min utforsker jeg hvordan vi kan lage modeller som tar hensyn
til gradientplastisk teori. [[./static/heggelund15.pdf][Teksten er tilgjengelig på engelsk]].
** Elm
Jeg tok initiativ til Kodeklubb i Elm i 2017. Erfaringer og anbefaling til bruk
er samlet i en [[./static/kodeklubben-kursplan-elm.pdf][kursplan]]. Oppgavene dekker 10 kurskvelder, der hver varer i
halvannen time.

Typisk materiell for å lære seg Elm på nett er for personer som allerede er
utviklere. Opplegget på Elm-kurset måtte være mer tilgjengelig; tidligere
erfaring med programmering var [[https://scratch.mit.edu][Scratch]], og kanskje litt [[https://www.python.org][Python]].

- [[http://oppgaver.kidsakoder.no/web/hvor_er_html/hvor_er_html.html][Hvor er HTML]] gir en visuell introduksjon til hvordan nettleseren leser og
  tolker HTML
- [[http://oppgaver.kidsakoder.no/elm/01_prov_i_nettleser/01_prov_i_nettleser.html][Prøv Elm i nettleseren]] introduser Elm-kode ved litt prøv og feil. Deltagerene
  får se hvordan fungerende kode ser ut, og hva resultatet er.
- [[http://oppgaver.kidsakoder.no/elm/02_funksjoner_elm_repl/02_funksjoner_elm_repl.html][Elm repl og funksjoner]] viser hvordan vi kan bruke ~elm repl~ å lage og teste
  funksjoner.
- [[http://oppgaver.kidsakoder.no/elm/03_moduler_elm_reactor/03_moduler_elm_reactor.html][Elm reactor og moduler]] (av Alexander Perry) viser hvordan vi kan gjøre rask
  utvikling med ~elm reactor~, og hvordan vi kan splitte opp kode vi skriver i
  forskjellige filer med moduler.
- [[http://oppgaver.kidsakoder.no/elm/04_input/04_input.html][Input fra brukeren]] (av Alexander Perry) viser hvordan vi kan /reagere/ på hva
  brukeren gjør i programmet vårt.
- [[http://oppgaver.kidsakoder.no/elm/05_tegne/05_tegne.html][Tegning med SVG]] viser hvordan vi kan tegne figuerer på nettsiden vår. Vi ser
  på SVG sin rolle, koordinatsystemer og kurver.
- [[http://oppgaver.kidsakoder.no/elm/06_lare_andres_spill/06_lare_andres_spill.html][Lær av et annet spill]] gir trening i å /lese/ kode. Vi laster ned spillet Elm
  Joust, og ser på hvordan spillet er bygget opp. Vi lærer å kompilere spillet
  selv, samt gjør noen endringer i farger og fysikkmotor.
- [[http://oppgaver.kidsakoder.no/elm/07_tell_sekunder/07_tell_sekunder.html][Tell sekunder]] viser hvordan vi bruker /tid/ i Elm. Hvor mange sekunder har
  gått siden vi åpnet siden? Kan vi få siden til å blinke?
- [[http://oppgaver.kidsakoder.no/elm/08_mus/08_mus.html][Kontroller med musen]] lar oss reagere på musebevegelser. Vi ser at hvordan vi
  tenker på musen er overraskende likt hvordan vi tenker på tid!
- [[http://oppgaver.kidsakoder.no/elm/09_egen_kode/09_egen_kode.html][Skrive egen kode]] (av Erik Aasmundrud) går tilbake til start, og gir
  mengdetrenging i å lage funksjoner.
- I [[http://oppgaver.kidsakoder.no/elm/10_fraktaler/10_fraktaler.html][Fraktaler]] definerer vi hva en fraktal er, og lærer å tegne våre egne. For å
  få til det, må vi innføre ~map~ og ~concat~ -- monadisk oppførsel for lister
** Python
Introduksjonskurs i Python med Alexander Perry for lærere og kolleger.
[[https://teodorlu.github.io/python-intro/][Materellet er åpent tilgjengelig]].
** ComputerCraft
ComputerCraft lar deg programmere dine egne objekter i Minecraft. Du får nye
blokker du kan bruke, deriblant nettopp en /Computer/.

Jeg liker særlig tilnærmingen: Datamaskinen i ComputerCraft har sitt eget
operativsystem. Operativsystemet kan du se kildekoden til. Du skriver programmer
som kjører på operativsystemet, på samme måte som programmering til vanlig.
Lærer man hvordan ComputerCraft henger sammen, kan man altså bruke dette direkte
til å forstå datamaskiner!

Jeg har laget to oppgaver til kurs:

- [[http://oppgaver.kidsakoder.no/computercraft/nettverk_send_beskjed/nettverk_send_beskjed.html][Send en beskjed]] viser hvordan vi kan bruke nettverket i ComputerCraft til å
  sende beskjeder fra en datamaskin til en annen. Nettverket fungerer litt som
  Internett.
- [[http://oppgaver.kidsakoder.no/computercraft/fjernstyr_en_robot/fjernstyr_en_robot.html][Fjernstyr en robot]] bruker nettverk til å lage en datamaskin som fungerer som
  fjernkontroll for en robot som mottar signaler.
